name: "Edit Subdomain"

on:
  issues:
    types: [opened]

jobs:
  Register:
    runs-on: ubuntu-latest
    if: github.event.issue.title == 'Edit'
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install Dependencies
        run: npm install cloudflare@3.2.0

      - name: Edit Subdomain
        env:
          EVENT_ISSUE_BODY: ${{ github.event.issue.body }}
          EVENT_USER_LOGIN: ${{ github.event.issue.user.login }}
          CF_TOKEN: ${{ secrets.CF_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          set -o pipefail
          node --no-deprecation scripts/edit > data.csv || { echo "Error running node script"; exit 1; }
          echo "Contents of data.csv:"
          cat data.csv

          # Extract fields from data.csv
          comment=$(cut -d "|" -f 2 data.csv)
          reason=$(cut -d "|" -f 1 data.csv)
          domain=$(cut -d "|" -f 3 data.csv)

          echo "Comment: $comment"
          echo "Reason: $reason"
          echo "Domain: $domain"

          # Ensure 'domain edit' label exists
          gh label list | grep -q 'domain edit' || gh label create 'domain edit' --color f39c12

          # Get current labels on the issue
          current_labels=$(gh issue view ${{ github.event.issue.number }} --json labels -q '.labels[].name')

          # Function to add label if it does not exist
          add_label_if_not_exists() {
            label=$1
            if echo "$current_labels" | grep -q "$label"; then
              echo "Label '$label' already exists on the issue."
            else
              gh issue edit ${{ github.event.issue.number }} --add-label "$label"
              echo "Label '$label' added to the issue."
            fi
          }

          # Update the issue with the new title and label
          gh issue edit ${{ github.event.issue.number }} -t "üåà Edit $domain" --add-label "domain edit"
          
          # Add success or failure label based on the registration result
          if [ "$reason" = "completed" ]; then
            add_label_if_not_exists "success"
          else
            add_label_if_not_exists "failed"
          fi

          # Format the comment for better readability
          formatted_comment=$(echo "$comment" | sed 's/\\n/\\n\\n/g')

          # Reply to the issue with the extracted information in a visually appealing format
          gh issue comment ${{ github.event.issue.number }} --body "### ‚ú® Domain Edit Information
          **Domain:** [$domain](http://$domain)
          **Reason:** $reason
          **Comment:**
          $formatted_comment
          
          Thank you @${{ github.event.issue.user.login }} for the request! üåü"

      - name: Handle Errors
        if: failure()
        run: |
          # Log the error and notify
          echo "An error occurred during the script execution. See details below:" >> error.log
          cat error.log
          gh issue comment ${{ github.event.issue.number }} --body "### ‚ùå Error Occurred
          An error occurred while processing the domain edit request. Please check the workflow logs for details.
          ```bash
          $(cat error.log)
          ```"
